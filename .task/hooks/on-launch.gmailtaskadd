#!/usr/bin/env python3

import base64
import json
import os.path
import subprocess
import time

from bs4 import BeautifulSoup
from shlex import quote
from datetime import timedelta as td
from http import client as httplib
from time import time as now

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

SCOPES = ['https://www.googleapis.com/auth/gmail.modify']

HOOKS_DIR = os.path.join(os.path.expanduser('~'), '.task', 'hooks')
CREDENTIALS = os.path.join(HOOKS_DIR, 'client_secret_8675309-foryourowncredsforyourowncredscall.apps.googleusercontent.com.json')
TOKEN = os.path.join(HOOKS_DIR, 'token.json')
JOB = os.path.join(HOOKS_DIR, 'gmailtaskadd.json')

class AlreadyRunningException(Exception): pass
class StopBuggingGoogleException(Exception): pass
class NoInternetException(Exception): pass
class NoNewTasksException(Exception): pass

WAIT_TIME = td(hours=1).total_seconds()


class JobSession:
    def __init__(self):
        self._d = {'isrunning': False, 'prevtime': 0}

    def __enter__(self):
        if os.path.exists(JOB):
            with open(JOB, 'r') as f:
                self._d = {**self._d, **json.load(f)}
                
        if self._d['isrunning']:
            raise AlreadyRunningException
        if self._d['prevtime'] + WAIT_TIME > now():
            raise StopBuggingGoogleException
        if no_internet():
            raise NoInternetException

        self._d['isrunning'] = True
        with open(JOB, 'w') as f:
            json.dump(self._d, f)
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        if exc_type not in [AlreadyRunningException, StopBuggingGoogleException]:
            self._d['prevtime'] = now()
        self._d['isrunning'] = False
        with open(JOB, 'w') as f:
            json.dump(self._d, f)

    def tasknotreadId(self, gmail):
        if 'tasknotread' not in self._d:
            labels = gmail.users().labels().list(userId='me').execute().get('labels', [])
            for label in labels:
                if label['name'] == 'tasknotread':
                    self._d['tasknotread'] = label['id']
        return self._d['tasknotread']
    

def no_internet():
    conn = httplib.HTTPSConnection('8.8.8.8', timeout=1)
    try:
        conn.request('HEAD', '/')
        return False
    except Exception:
        return True
    finally:
        conn.close()


def get_credentials():
    creds = None
    if os.path.exists(TOKEN):
        creds = Credentials.from_authorized_user_file(TOKEN, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(TOKEN, 'w') as token:
            token.write(creds.to_json())
    return creds


def get_body_data(parts):  
    for part in parts:
        if (part['mimeType']) in ('text/plain','text/html'):
            return part['body']['data']
        elif 'parts' in part:
            return get_body_data(part['parts'])


def get_task(decoded_data):
    soup = BeautifulSoup(decoded_data, 'html.parser')
    soup.body.unwrap()
    soup.tr.unwrap()
    lines = []
    for chunk in soup.td:
        paragraph = chunk.strip()
        lines.extend(paragraph.splitlines())
    return Task(lines)


class Task():
    def __init__(self, msg_lines):
        self.tagtokens = []
        self.project = ''
        self.priority = ''
        self.annotations = [quote(line) for line in msg_lines[1:]]

        tokens = msg_lines[0].split()
        for token in tokens:
            if token.startswith('+'):
                self.tagtokens.append(f'{quote(token)} ')
                tokens.remove(token)

            if token.startswith('pro:'):
                self.project = f'{quote(token)} '
                tokens.remove(token)

            if token.startswith('pri:'):
                uppertoken = token[:-1] + token[-1].upper()
                self.priority = f'{quote(uppertoken)} '
                tokens.remove(token)

        self.tags = ''.join(self.tagtokens) if self.tagtokens else ''
        self.description = f'{quote(" ".join(tokens))} '
        self.entrytime = 'entry:1969-12-31T19:00:00'

    def set_entrytime(self, internalDate):
        local_time = time.localtime(float(internalDate)/1000)
        self.entrytime = f'entry:{time.strftime("%Y-%m-%dT%H:%M:%S", local_time)}'

    @property
    def bash_script(self):
        bash = [f'task add {self.description}{self.tags}{self.project}{self.priority}{self.entrytime}']
        if self.annotations:
            bash.append('ID=$(task +LATEST ids)')
            for a in self.annotations:
                bash.append(f'task $ID annotate {a}')
        return '\n'.join(bash)


###############################################################################
# Main
###############################################################################
def main():
    try:
        with JobSession() as job:
            gmail = build('gmail', 'v1', credentials=get_credentials())
            query = 'in:taskadd in:tasknotread'
            resource = gmail.users().messages()
            messageIds = resource.list(userId='me',q=query).execute().get('messages')

            if not messageIds:
                raise NoNewTasksException
            
            for msgId in messageIds:
                msg = resource.get(userId='me', id=msgId['id']).execute()
                data = get_body_data(msg['payload']['parts'])
                decoded_data = base64.b64decode(data.replace('-','+').replace('_','/'))

                task = get_task(decoded_data)
                task.set_entrytime(msg['internalDate'])
                subprocess.run(task.bash_script, shell=True)
                
                remove = {'removeLabelIds': ['INBOX', job.tasknotreadId(gmail)]}
                resource.modify(userId='me', id=msgId['id'], body=remove).execute()

    except AlreadyRunningException as e:     pass
    except StopBuggingGoogleException as e:  pass
    except NoInternetException as e:         print('No internet connection.')
    except NoNewTasksException as e:         print('No new tasks from phone.')
    except HttpError as e:                   print(f'An error occurred: {e}')


if __name__ == '__main__':
    main()
